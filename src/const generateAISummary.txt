const generateAISummary = async () => {
  if (!isPremium) { setShowUpgradeModal(true); return; }
  setIsGeneratingSummary(true);
  setAiSuggestions(prev => ({ ...prev, summary: [] }));

  try {
    const prompt = `Based on the following resume information, generate 3 concise, impactful professional summary options. Each should be 2-3 sentences highlighting key achievements and skills relevant to the target role.

Current Summary: "${resumeData.summary || 'Not provided'}"
Target Job Role: "${resumeData.targetRole || 'Not specified'}"
Experience: ${resumeData.experience.map(exp => `${exp.position} at ${exp.company}: ${exp.description}`).join('. ')}
Skills: ${resumeData.skills.join(', ')}

Provide 3 different summary options, each on a new line starting with "Option 1:", "Option 2:", "Option 3:".`;

    const completion = await callAICompletion(prompt);
    const options = completion
      .split('\n')
      .filter(line => line.trim().startsWith('Option'));
    if (options.length > 0) {
      setAiSuggestions(prev => ({
        ...prev,
        summary: options.map(option => option.replace(/^Option \d+:\s*/, '').trim()),
      }));
      toast.success('AI summaries generated!');
    } else {
      toast.error('Failed to generate summaries. Please try again.');
    }
  } catch (err: any) {
    toast.error('Error generating AI
 summaries. Please try again.');
  } finally {
    setIsGeneratingSummary(false);
  }
};

const generateAIAchievements = async (expIndex: number) => {
  if (!isPremium) { setShowUpgradeModal(true); return; }
  setIsGeneratingAchievements(expIndex);

  try {
    const currentExperience = resumeData.experience[expIndex];
    const prompt = `Generate 3-4 impactful, quantifiable achievement bullet points for this role. Use strong action verbs and include metrics where possible.

Job Title: ${currentExperience.position}
Company: ${currentExperience.company}
Description: ${currentExperience.description}
Target Role: ${resumeData.targetRole || 'General'}

Format each achievement as a bullet point starting with "•". Focus on results, impact, and numbers.`;

    const completion = await callAICompletion(prompt);
    const bulletPoints = completion
      .split('\n')
      .filter(line => line.trim().startsWith('•'));

    if (bulletPoints.length > 0) {
      const updatedExperiences = resumeData.experience.map((exp, i) =>
        i === expIndex ? { ...exp, achievements: bulletPoints } : exp
      );
      updateResumeData('experience', '', updatedExperiences);
      toast.success('AI achievements generated!');
    } else {
      toast.error('Failed to generate achievements. Please try again.');
    }
  } catch (err: any) {
    toast.error('Error generating AI achievements. Please try again.');
  } finally {
    setIsGeneratingAchievements(null);
  }
};

const generateAISkillSuggestions = async () => {
  if (!isPremium) { setShowUpgradeModal(true); return; }
  setIsGeneratingSkills(true);
  setAiSuggestions(prev => ({ ...prev, skills: [] }));

  try {
    const prompt = `Based on the following information, suggest 10-15 relevant technical and soft skills for this professional. Return only a comma-separated list of skills.

Target Role: ${resumeData.targetRole || 'Not specified'}
Current Skills: ${resumeData.skills.join(', ')}
Experience: ${resumeData.experience.map(exp => exp.description).join('. ')}
Summary: ${resumeData.summary}

Suggest skills that are:
1. Relevant to the target role
2. Not already in the current skills list
3. Industry-standard and ATS-friendly

Return only the skills as a comma-separated list, nothing else.`;

    const completion = await callAICompletion(prompt);
    const skillsArray = completion
      .split(',')
      .map(skill => skill.trim())
      .filter(skill => skill.length > 0 && !resumeData.skills.includes(skill));

    if (skillsArray.length > 0) {
      setAiSuggestions(prev => ({ ...prev, skills: skillsArray }));
      toast.success('AI skill suggestions generated!');
    } else {
      toast.error('Failed to generate skill suggestions. Please try again.');
    }
  } catch (err: any) {
    toast.error('Error generating AI skills. Please try again.');
  } finally {
    setIsGeneratingSkills(false);
  }
};


  // Save Resume Function
  const saveResume = async () => {
    if (!user) {
      toast.error('Please log in to save your resume.');
      return;
    }
    if (!resumeData.personal.fullName || !resumeData.personal.email) {
      toast.error('Please fill in your Full Name and Email before saving.');
      return;
    }

    setSaving(true);
    try {
      const { data: existingResume } = await supabase
        .from('resumes')
        .select('id')
        .eq('user_id', user.id)
        .single();

      if (existingResume) {
        const { error } = await supabase
          .from('resumes')
          .update({
            content: resumeData,
            ats_score: atsScore,
            updated_at: new Date().toISOString()
          })
          .eq('id', existingResume.id);

        if (error) throw error;
        toast.success('Resume updated successfully!');
      } else {
        const { error } = await supabase
          .from('resumes')
          .insert({
            user_id: user.id,
            content: resumeData,
            ats_score: atsScore,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          });

        if (error) throw error;
        toast.success('Resume saved successfully!');
      }
    } catch (error: any) {
      console.error('Save Resume Error:', error);
      toast.error(`Failed to save resume: ${error.message || 'Unknown error'}`);
    } finally {
      setSaving(false);
    }
  };

  // Helper functions
  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-500';
    if (score >= 60) return 'text-yellow-500';
    return 'text-red-500';
  };

  const getScoreGradient = (score: number) => {
    if (score >= 80) return 'from-green-400 to-green-600';
    if (score >= 60) return 'from-yellow-400 to-yellow-600';
    return 'from-red-400 to-red-600';
  };

  if (loadingInitialData) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-950">
        <div className="flex flex-col items-center">
          <Loader className="animate-spin h-10 w-10 text-blue-500 mb-4" />
          <p className="text-white">Loading your builder...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-950 text-gray-100">
      {/* Top Navigation Bar */}
      <div className="bg-gray-900 border-b border-gray-800 sticky top-0 z-50 backdrop-blur-xl bg-opacity-90">
        <div className="max-w-7xl mx-auto px-4 py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="flex items-center space-x-2">
                <Target className="w-6 h-6 text-blue-500" />
                <span className="text-xl font-bold text-white">SmartATS</span>
              </div>
              <span className="text-gray-400 text-sm">Real-time Resume Optimizer</span>
            </div>
            <div className="flex items-center space-x-3">
              {!isPremium && (
                <Button
                  onClick={() => setShowUpgradeModal(true)}
                  className="animate-pulse bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 text-white px-4 py-2 rounded-lg font-bold shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200"
                >
                  <Crown className="w-4 h-4 mr-2" />
                  Upgrade to Pro!
                </Button>
              )}
              <div className={`text-xs px-3 py-1 rounded-full ${
                isPremium
                  ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white'
                  : 'bg-gray-800 text-gray-400'
              }`}>
                {isPremium ? '✨ Premium' : 'Free Plan'}
              </div>
              {user ? (
                <>
                  <Button
                    onClick={saveResume}
                    disabled={saving}
                    className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium disabled:opacity-50"
                  >
                    <Save className="w-4 h-4" />
                    <span>{saving ? 'Saving...' : 'Save'}</span>
                  </Button>
                  <Button
                    onClick={handleLogout}
                    className="flex items-center space-x-2 px-4 py-2 bg-gray-800 text-white rounded-lg hover:bg-gray-700 transition-colors text-sm font-medium"
                  >
                    Logout
                  </Button>
                </>
              ) : (
                <Button
                  onClick={handleLogin}
                  className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium"
                >
                  Login
                </Button>
              )}
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 py-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Main Content Area */}
          <div className="lg:col-span-2 space-y-6">
            {/* Section Tabs */}
            <div className="bg-gray-900 rounded-xl p-1 flex space-x-1 border border-gray-800">
              {[
                { id: 'personal', label: 'Personal', icon: User },
                { id: 'summary', label: 'Summary', icon: FileText },
                { id: 'experience', label: 'Experience', icon: Briefcase },
                { id: 'education', label: 'Education', icon: GraduationCap },
                { id: 'skills', label: 'Skills', icon: Hash }
              ].map(tab => (
                <button
                  key={tab.id}
                  onClick={() => setActiveSection(tab.id)}
                  className={`flex-1 flex items-center justify-center space-x-2 px-4 py-3 rounded-lg font-medium transition-all ${
                    activeSection === tab.id
                      ? 'bg-blue-600 text-white shadow-lg'
                      : 'text-gray-400 hover:text-white hover:bg-gray-800'
                  }`}
                >
                  <tab.icon className="w-4 h-4" />
                  <span className="hidden sm:inline">{tab.label}</span>
                </button>
              ))}
            </div>

            {/* Content Sections */}
            <div className="bg-gray-900 rounded-xl p-6 border border-gray-800">
              {activeSection === 'personal' && (
                <div className="space-y-4">
                  <h2 className="text-xl font-semibold text-white mb-4">Personal Information</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <input
                      type="text"
                      placeholder="Full Name"
                      value={resumeData.personal.fullName}
                      onChange={(e) => updateResumeData('personal', 'fullName', e.target.value)}
                      className="bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white placeholder-gray-500 focus:outline-none focus:border-blue-500 transition-colors"
                    />
                    <input
                      type="text"
                      placeholder="Professional Title"
                      value={resumeData.personal.title}
                      onChange={(e) => updateResumeData('personal', 'title', e.target.value)}
                      className="bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white placeholder-gray-500 focus:outline-none focus:border-blue-500 transition-colors"
                    />
                    <input
                      type="email"
                      placeholder="Email Address"
                      value={resumeData.personal.email}
                      onChange={(e) => updateResumeData('personal', 'email', e.target.value)}
                      className="bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white placeholder-gray-500 focus:outline-none focus:border-blue-500 transition-colors"
                    />
                    <input
                      type="tel"
                      placeholder="Phone Number"
                      value={resumeData.personal.phone}
                      onChange={(e) => updateResumeData('personal', 'phone', e.target.value)}
                      className="bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white placeholder-gray-500 focus:outline-none focus:border-blue-500 transition-colors"
                    />
                    <LocationAutocomplete
                      value={resumeData.personal.location}
                      onChange={(value) => updateResumeData('personal', 'location', value)}
                      placeholder="Location"
                      className="bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white placeholder-gray-500 focus:outline-none focus:border-blue-500 transition-colors w-full"
                    />
                    <input
                      type="url"
                      placeholder="LinkedIn URL"
                      value={resumeData.personal.linkedin}
                      onChange={(e) => updateResumeData('personal', 'linkedin', e.target.value)}
                      className="bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white placeholder-gray-500 focus:outline-none focus:border-blue-500 transition-colors"
                    />
                  </div>
                </div>
              )}

              {activeSection === 'summary' && (
                <div className="space-y-4">
                  <div className="flex items-center justify-between mb-4">
                    <h2 className="text-xl font-semibold text-white">Professional Summary</h2>
                    <Button
                      onClick={generateAISummary}
                      disabled={isGeneratingSummary}
                      className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-all transform hover:scale-105 ${
                        isPremium
                          ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-700 hover:to-blue-700'
                          : 'bg-gradient-to-r from-yellow-500 to-orange-500 text-white hover:from-yellow-600 hover:to-orange-600 animate-pulse'
                      }`}
                    >
                      {isGeneratingSummary ? (
                        <>
                          <Loader className="w-4 h-4 animate-spin" /> Generating...
                        </>
                      ) : (
                        <>
                          <Brain className="w-4 h-4" />
                          <span>AI Generate</span>
                          {!isPremium && <Star className="w-4 h-4 ml-1" />}
                        </>
                      )}
                    </Button>
                  </div>

                  <textarea
                    placeholder="Write a compelling professional summary that highlights your experience and skills..."
                    value={resumeData.summary}
                    onChange={(e) => updateResumeData('summary', '', e.target.value)}
                    rows={6}
                    className="w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white placeholder-gray-500 focus:outline-none focus:border-blue-500 transition-colors"
                  />

                  {aiSuggestions.summary.length > 0 && (
                    <div className="mt-4 space-y-3 p-4 bg-gray-800 rounded-lg border border-gray-700">
                      <p className="text-sm text-gray-400">AI-Generated Options:</p>
                      {aiSuggestions.summary.map((suggestion, index) => (
                        <div
                          key={index}
                          onClick={() => updateResumeData('summary', '', suggestion)}
                          className="p-3 bg-gray-700 border border-gray-600 rounded-lg cursor-pointer hover:border-blue-500 transition-colors text-sm text-gray-300"
                        >
                          {suggestion}
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              )}

              {activeSection === 'experience' && (
                <div className="space-y-6">
                  <div className="flex justify-between items-center">
                    <h2 className="text-xl font-semibold text-white">Work Experience</h2>
                    <Button
                      onClick={() => updateResumeData('experience', '', [...resumeData.experience, { company: '', position: '', duration: '', description: '', achievements: [''] }])}
                      variant="secondary"
                      className="bg-gray-800 text-white hover:bg-gray-700"
                    >
                      <Plus className="w-4 h-4 mr-2" /> Add Entry
                    </Button>
                  </div>
                  {resumeData.experience.map((exp, expIndex) => (
                    <div key={expIndex} className="bg-gray-800 rounded-lg p-5 border border-gray-700 space-y-4">
                      <div className="flex justify-end">
                        {resumeData.experience.length > 1 && (
                          <Button
                            onClick={() => updateResumeData('experience', '', resumeData.experience.filter((_, i) => i !== expIndex))}
                            variant="ghost"
                            className="text-red-400 hover:bg-red-900"
                          >
                            <X className="w-4 h-4" />
                          </Button>
                        )}
                      </div>
                      <input
                        type="text"
                        placeholder="Company Name"
                        value={exp.company}
                        onChange={(e) => {
                          const newExp = [...resumeData.experience];
                          newExp[expIndex].company = e.target.value;
                          updateResumeData('experience', '', newExp);
                        }}
                        className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors"
                      />
                      <input
                        type="text"
                        placeholder="Position Title"
                        value={exp.position}
                        onChange={(e) => {
                          const newExp = [...resumeData.experience];
                          newExp[expIndex].position = e.target.value;
                          updateResumeData('experience', '', newExp);
                        }}
                        className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors"
                      />
                      <input
                        type="text"
                        placeholder="Duration (e.g., Jan 2020 - Present)"
                        value={exp.duration}
                        onChange={(e) => {
                          const newExp = [...resumeData.experience];
                          newExp[expIndex].duration = e.target.value;
                          updateResumeData('experience', '', newExp);
                        }}
                        className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors"
                      />
                      <textarea
                        placeholder="Describe your responsibilities and achievements. Use action verbs and include metrics!"
                        value={exp.description}
                        onChange={(e) => {
                          const newExp = [...resumeData.experience];
                          newExp[expIndex].description = e.target.value;
                          updateResumeData('experience', '', newExp);
                        }}
                        rows={4}
                        className="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors"
                      />
                      <div className="flex items-center justify-between">
                        <label className="text-sm text-gray-300">Key Achievements</label>
                        <Button
                          onClick={() => generateAIAchievements(expIndex)}
                          disabled={isGeneratingAchievements === expIndex}
                          size="sm"
                          className={`flex items-center space-x-1 px-3 py-1 rounded-lg text-xs ${
                            isPremium 
                              ? 'bg-blue-600 text-white hover:bg-blue-700' 
                              : 'bg-gradient-to-r from-yellow-500 to-orange-500 text-white hover:from-yellow-600 hover:to-orange-600 animate-pulse'
                          }`}
                        >
                          {isGeneratingAchievements === expIndex ? (
                            <Loader className="w-3 h-3 animate-spin" />
                          ) : (
                            <>
                              <Lightbulb className="w-3 h-3" />
                              <span>AI Gen</span>
                              {!isPremium && <Star className="w-3 h-3" />}
                            </>
                          )}
                        </Button>
                      </div>
                      {exp.achievements.map((ach, achIndex) => (
                        <div key={achIndex} className="flex items-center space-x-2">
                          <span className="text-gray-400">•</span>
                          <textarea
                            value={ach}
                            onChange={(e) => {
                              const newExp = [...resumeData.experience];
                              newExp[expIndex].achievements[achIndex] = e.target.value;
                              updateResumeData('experience', '', newExp);
                            }}
                            rows={1}
                            className="flex-grow bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors"
                          />
                          <Button
                            onClick={() => {
                              const newExp = [...resumeData.experience];
                              newExp[expIndex].achievements = newExp[expIndex].achievements.filter((_, i) => i !== achIndex);
                              updateResumeData('experience', '', newExp);
                            }}
                            variant="ghost"
                            className="text-red-400 hover:bg-red-900 p-1"
                          >
                            <X className="w-4 h-4" />
                          </Button>
                        </div>
                      ))}
                      <Button
                        onClick={() => {
                          const newExp = [...resumeData.experience];
                          newExp[expIndex].achievements.push('');
                          updateResumeData('experience', '', newExp);
                        }}
                        variant="secondary"
                        className="w-full bg-gray-700 text-white hover:bg-gray-600"
                      >
                        <Plus className="w-4 h-4 mr-2" /> Add Achievement
                      </Button>
                    </div>
                  ))}
                </div>
              )}

              {activeSection === 'education' && (
                <div className="space-y-4">
                  <h2 className="text-xl font-semibold text-white mb-4">Education</h2>
                  <div className="space-y-4">
                    <input
                      type="text"
                      placeholder="School Name"
                      value={resumeData.education[0].school}
                      onChange={(e) => {
                        const newEdu = [...resumeData.education];
                        newEdu[0].school = e.target.value;
                        updateResumeData('education', '', newEdu);
                      }}
                      className="w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white placeholder-gray-500 focus:outline-none focus:border-blue-500 transition-colors"
                    />
                    <input
                      type="text"
                      placeholder="Degree (e.g., Bachelor of Science)"
                      value={resumeData.education[0].degree}
                      onChange={(e) => {
                        const newEdu = [...resumeData.education];
                        newEdu[0].degree = e.target.value;
                        updateResumeData('education', '', newEdu);
                      }}
                      className="w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white placeholder-gray-500 focus:outline-none focus:border-blue-500 transition-colors"
                    />
                    <input
                      type="text"
                      placeholder="Year (e.g., 2022)"
                      value={resumeData.education[0].year}
                      onChange={(e) => {
                        const newEdu = [...resumeData.education];
                        newEdu[0].year = e.target.value;
                        updateResumeData('education', '', newEdu);
                      }}
                      className="w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white placeholder-gray-500 focus:outline-none focus:border-blue-500 transition-colors"
                    />
                  </div>
                </div>
              )}

              {activeSection === 'skills' && (
                <div className="space-y-4">
                  <h2 className="text-xl font-semibold text-white mb-4">Skills & Keywords</h2>
                  <div className="mb-4">
                    <label className="block text-sm text-gray-400 mb-2">Target Job Role</label>
                    <input
                      type="text"
                      placeholder="e.g., Senior Software Engineer, Product Manager"
                      value={resumeData.targetRole}
                      onChange={(e) => updateResumeData('targetRole', '', e.target.value)}
                      className="w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white placeholder-gray-500 focus:outline-none focus:border-blue-500 transition-colors"
                    />
                    <p className="text-xs text-gray-500 mt-1">This helps optimize keywords for your target position</p>
                  </div>
                  <div>
                    <label className="block text-sm text-gray-400 mb-2">Skills (comma-separated)</label>
                    <textarea
                      placeholder="JavaScript, React, Node.js, Python, AWS, Docker, Agile, Leadership..."
                      value={resumeData.skills.join(', ')}
                      onChange={(e) => updateResumeData('skills', '', e.target.value.split(',').map(s => s.trim()).filter(s => s))}
                      rows={3}
                      className="w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-3 text-white placeholder-gray-500 focus:outline-none focus:border-blue-500 transition-colors"
                    />
                  </div>
                  <Button
                    onClick={generateAISkillSuggestions}
                    disabled={isGeneratingSkills}
                    className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-all transform hover:scale-105 ${
                      isPremium
                        ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-700 hover:to-blue-700'
                        : 'bg-gradient-to-r from-yellow-500 to-orange-500 text-white hover:from-yellow-600 hover:to-orange-600 animate-pulse'
                    }`}
                  >
                    {isGeneratingSkills ? (
                      <>
                        <Loader className="w-4 h-4 animate-spin" /> Generating...
                      </>
                    ) : (
                      <>
                        <Lightbulb className="w-4 h-4" />
                        <span>AI Suggest Skills</span>
                        {!isPremium && <Star className="w-4 h-4 ml-1" />}
                      </>
                    )}
                  </Button>
                  {aiSuggestions.skills.length > 0 && (
                    <div className="mt-4 space-y-3 p-4 bg-gray-800 rounded-lg border border-gray-700">
                      <p className="text-sm text-gray-400">AI-Generated Skill Suggestions:</p>
                      <div className="flex flex-wrap gap-2">
                        {aiSuggestions.skills.map((skill, index) => (
                          <span
                       
